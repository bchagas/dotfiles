export PATH="$HOME/.ruby/active/bin:$HOME/.bin:/usr/local/bin:/usr/local/sbin:/usr/local/share/npm/bin:$PATH"
export CLASSPATH="/usr/local/rhino:$CLASSPATH"
export NODE_PATH="$HOME/.npm"
export EVENT_NOKQUEUE=1
export MANPATH=/usr/local/git/man:$MANPATH
export EDITOR="mate -wl1"
export SVN_EDITOR="mate -wl1"
export HISTCONTROL=erasedups
export HISTFILESIZE=100000
export HISTSIZE=${HISTFILESIZE}
export GREP_OPTIONS="--color=auto"
export GREP_COLOR="4;33"
export CDPATH=.:~:~/Sites:~/Sites/github
export CDHISTORY="/tmp/cd-${USER}"

update_gem_path() {
  local full_ruby_version=$(ruby -e "puts RUBY_VERSION")
  local partial_ruby_version=`echo $full_ruby_version | sed -E 's/\.[0-9]+$//'`

  if [ -d "$HOME/.gem/ruby/$full_ruby_version" ]; then
    ruby_version=$full_ruby_version
  else
    ruby_version=$partial_ruby_version
  fi

  export GEM_PATH="$GEM_SPACES/active:$GEM_SPACES/$partial_ruby_version/global:$HOME/.gem/ruby/$ruby_version"
}

export GEM_SPACES="$HOME/.gem/spaces"
export GEM_HOME="$GEM_SPACES/active"
export GEM_BIN="$GEM_SPACES/active/bin"
export GEM_EDITOR="mate"
export PATH="$GEM_BIN:$PATH"
update_gem_path

export LESS_TERMCAP_mb=$'\E[04;33m'
export LESS_TERMCAP_md=$'\E[04;33m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[00;32m'

# Amazon EC2
export EC2_HOME="/Users/fnando/.ec2"
export EC2_PRIVATE_KEY="$EC2_HOME/pk.pem"
export EC2_CERT="$EC2_HOME/cert.pem"
export EC2_AMI_HOME="$EC2_HOME/ec2-ami-tools"
export PATH="$EC2_HOME/bin:$EC2_AMI_HOME/bin:$PATH"
export JAVA_HOME="/Library/Java/Home"

# Colours
export BLUE="\[\033[0;34m\]"
export NO_COLOR="\[\e[0m\]"
export GRAY="\[\033[1;30m\]"
export GREEN="\[\033[0;32m\]"
export LIGHT_GRAY="\[\033[0;37m\]"
export LIGHT_GREEN="\[\033[1;32m\]"
export LIGHT_RED="\[\033[1;31m\]"
export RED="\[\033[0;31m\]"
export WHITE="\[\033[1;37m\]"
export YELLOW="\[\033[0;33m\]"

source ~/.git_completion.sh
source ~/.bash_completion.sh
source ~/.gem_completion.sh

alias cdto="cd `osascript ~/.finder-path.applescript` &> /dev/null"
alias redis="redis-server"
alias growl="growlnotify"
alias js="java org.mozilla.javascript.tools.shell.Main"
alias ls="ls -G"
alias ll="ls -Glahs"
alias psgrep="ps aux | egrep -v egrep | egrep"
alias showip="curl http://f.simplesideias.com.br/ip.php; echo; ifconfig | grep broadcast | sed 's/.*inet \(.*\) netmask.*/\1/'"
alias lock="/System/Library/CoreServices/Menu\ Extras/user.menu/Contents/Resources/CGSession -suspend"
alias quicksilver="open /Applications/Quicksilver.app"
alias qs="quicksilver"
alias top="top -o cpu"
alias mysql="mysql --auto-rehash=TRUE"
alias ni="lsof -i -Pn"
alias make="make -j 2"
alias cleanup="sudo rm -rf /private/var/log/asl/*"
alias xmlget="curl -X GET -H 'Accept: application/xml'"
alias jsonget="curl -X GET -H 'Accept: application/json'"
alias xmlpost="curl -X POST -H 'Accept: application/xml'"
alias xmlput="curl -X PUT -H 'Accept: application/xml'"
alias xmldelete="curl -X DELETE -H 'Accept: application/xml'"
alias r="rails"
alias tunnel="sudo ssh -vND localhost:666 fnando@simplesideias.com.br"

shopt -s cdspell
shopt -s nocaseglob
shopt -s checkwinsize
shopt -s dotglob
shopt -s extglob
shopt -s progcomp
set -o ignoreeof
unset MAILCHECK                           # disable "you have mail" warning
ulimit -S -c 0                            # disable core dump
bind "set completion-ignore-case on"      # ignore case on bash completion
bind "set mark-symlinked-directories on"  # add trailing slash to symlinked directories

# Set window title
title() {
  echo -ne "\033]0;$@\007";
}

# Usage: f /some/path [grep options]
f() {
  local path="$1"
  shift
  find "$path" -follow -name '*' | xargs grep "$*"
}

# reload source
reload() { source ~/.bash_profile; }

# Specify which ruby version to use
# Here's how my ruby is installed:
#
#   ~/.ruby/1.9.2-p0
#   ~/.ruby/1.9.2-rc2
#   ~/.ruby/1.9.1-p378
#   ~/.ruby/1.8.7-p302
#   ~/.ruby/1.8.7-p299
#   ~/.ruby/ree-1.8.7-2010.02
#   ~/.ruby/active
#
# The active directory is a symlink to the active
# ruby version. This is also on the $PATH.
#
#   export PATH="~/.ruby/active/bin:$PATH"
#
rv() {
  local root="$HOME/.ruby"
  local version="invalid"

  if [ "$1" = "192" ]; then
    version="1.9.2-p0"
  elif [ "$1" = "191" ]; then
    version="1.9.1-p378"
  elif [ "$1" = "187" ]; then
    version="1.8.7-p302"
  elif [ "$1" = "ree" ]; then
    version="ree-1.8.7-2010.02"
  fi

  local rubydir="$root/$version"

  if [ -d $rubydir ]; then
    echo "Activating Ruby $version"
    rm $root/active && ln -s $root/$version $root/active
    gem space base
    update_gem_path
  else
    echo "Specify a Ruby version: 187, 191, 192, ree"
  fi
}

# list directory after cd; also save the last directory
# and open it when a new tab is created.
# if a file .rubyrc exists, the specified ruby version and
# gem space are used.
cd() {
  builtin cd "${@:-$HOME}" && ls && pwd > $CDHISTORY;
  # builtin cd "${@:-$HOME}" && pwd > $CDHISTORY;

  if [ -f ".rubyrc" ]; then
    local config=$(cat .rubyrc)
    rv `echo $config | sed 's/.*@//'`
    update_gem_path
    gem space `echo $config | sed 's/@.*//'`
  fi
}

if [ -f $CDHISTORY ]; then
  dir=$(cat $CDHISTORY)

  if [ -d "$dir" ]; then
    builtin cd "$dir" && clear
  fi
fi

check_gzip_request() {
  local r=`curl --write-out "%{size_download}" --output /dev/null --silent $1`
  local g=`curl -H "Accept-Encoding: gzip,deflate" --write-out "%{size_download}" --output /dev/null --silent $1`
  local message

  local rs=`expr ${r} / 1024`
  local gs=`expr ${g} / 1024`

  if [[ "$r" =  "$g" ]]; then
    message="Regular: ${rs}KB\n\033[31m → Gzip: ${gs}KB\033[0m"
  else
    message="Regular: ${rs}KB\n\033[32m → Gzip: ${gs}KB\033[0m"
  fi

  echo -e $message
  return 0
}

# get the tinyurl
tinyurl () {
  local tmp=/tmp/tinyurl
  rm $tmp > /dev/null 2>&1
  wget "http://tinyurl.com/api-create.php?url=${1}" -O $tmp > /dev/null 2>&1
  cat $tmp | pbcopy
}

# retrieve all rake tasks
_rakecomplete() {
  COMP_WORDBREAKS=${COMP_WORDBREAKS/\:/}
  local words=`rake -T | grep rake | sed 's/rake \([^ ]*\).*/\1/'`
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($(compgen -W "$words" -- $cur))
  return 0
}

complete -o default -F _rakecomplete rake

# github repository cloning
# usage:
#  github has_permalink     ~> will clone $USER repositories
#  github username repository ~> will clone someone else's
github() {
  if [ $# = 1 ]; then
    git clone git@github.com:$USER/$1.git;
    builtin cd $1 && ls;
  elif [ $# = 2 ]; then
    git clone git://github.com/$1/$2.git;
    builtin cd $2 && ls;
  else
    echo "Usage:";
    echo "  github <repo>    ~> will clone $USER's <repo>";
    echo "  github <user> <repo> ~> will clone <user>'s <repo>";
  fi
}

custom_prompt () {
  local BRANCH=`git branch 2> /dev/null | grep \* | sed 's/* //'`

  if [[ "$BRANCH" = "" ]]; then
    BRANCH=`git status 2> /dev/null | grep "On branch" | sed 's/# On branch //'`
  fi

  local RUBY_VERSION=`ruby -e "puts RUBY_VERSION"`
  local GEM_SPACE=`gem space 2> /dev/null | grep \* | sed 's/* //'`
  local RAILS_VERSION=`rails -v 2> /dev/null | sed 's/Rails //'`
  local RAILS_PROMPT=""
  local RUBY_PROMPT=""
  local STATUS=`git status 2>/dev/null`
  local PROMPT_COLOR=$GREEN
  local STATE=" "
  local NOTHING_TO_COMMIT="# Initial commit"
  local BEHIND="# Your branch is behind"
  local AHEAD="# Your branch is ahead"
  local UNTRACKED="# Untracked files"
  local DIVERGED="have diverged"
  local CHANGED="# Changed but not updated"
  local TO_BE_COMMITED="# Changes to be committed"
  local LOG=`git log -1 2> /dev/null`

  if [[ "$RAILS_VERSION" != "" ]]; then
    RAILS_PROMPT="${RAILS_VERSION}@"
  fi

  if [[ "$GEM_SPACE" != "" ]]; then
    RUBY_PROMPT="${GRAY}[${RAILS_PROMPT}${GEM_SPACE}#${RUBY_VERSION}]${NO_COLOR} "
  else
    RUBY_PROMPT="${GRAY}[${RAILS_PROMPT}${RUBY_VERSION}]${NO_COLOR} "
  fi

  if [ "$STATUS" != "" ]; then
    if [[ "$STATUS" =~ "$NOTHING_TO_COMMIT" ]]; then
      PROMPT_COLOR=$RED
      STATE=""
    elif [[ "$STATUS" =~ "$DIVERGED" ]]; then
      PROMPT_COLOR=$RED
      STATE="${STATE}${RED}↕${NO_COLOR}"
    elif [[ "$STATUS" =~ "$BEHIND" ]]; then
      PROMPT_COLOR=$RED
      STATE="${STATE}${RED}↓${NO_COLOR}"
    elif [[ "$STATUS" =~ "$AHEAD" ]]; then
      PROMPT_COLOR=$RED
      STATE="${STATE}${RED}↑${NO_COLOR}"
    elif [[ "$STATUS" =~ "$CHANGED" ]]; then
      PROMPT_COLOR=$RED
      STATE=""
    elif [[ "$STATUS" =~ "$TO_BE_COMMITED" ]]; then
      PROMPT_COLOR=$RED
      STATE=""
    else
      PROMPT_COLOR=$GREEN
      STATE=""
    fi

    if [[ "$STATUS" =~ "$UNTRACKED" ]]; then
      STATE="${STATE}${YELLOW}*${NO_COLOR}"
    fi

    PS1="\n${RUBY_PROMPT}${YELLOW}\w\a${NO_COLOR} (${PROMPT_COLOR}${BRANCH}${NO_COLOR}${STATE}${NO_COLOR})\n\$ "
  else
    PS1="\n${RUBY_PROMPT}${YELLOW}\w\a${NO_COLOR}\n\$ "
  fi

  # screencast
  # PS1="\n[\u] \w\n\$ "
}

# taken from http://github.com/bryanl/zshkit/
git-track () {
  local BRANCH=`git branch 2> /dev/null | grep \* | sed 's/* //'`
  git config branch.$BRANCH.remote origin
  git config branch.$BRANCH.merge refs/heads/$BRANCH
  echo "tracking origin/$BRANCH"
}
github-url () { git config remote.origin.url | sed -En 's/git(@|:\/\/)github.com(:|\/)(.+)\/(.+).git/https:\/\/github.com\/\3\/\4/p'; }
github-go () { open $(github-url); }
git-scoreboard () { git log | grep '^Author' | sort | uniq -ci | sort -r; }
manp () { man -t $* | ps2pdf - - | open -f -a Preview; }

PROMPT_COMMAND=custom_prompt
