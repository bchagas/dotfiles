title() {
  echo -ne "\033]0;$@\007";
}

reload() {
  source ~/.bash_profile;
}

git_status(){
  if [[ "$1" != "" ]]; then
    local CURRENT_DIR=`pwd`
    cd $1
  fi

  local STATUS=`git status 2>/dev/null`
  local PROMPT_STATUS=""
  local STATE=""
  local NOTHING_TO_COMMIT="# Initial commit"
  local BEHIND="# Your branch is behind"
  local AHEAD="# Your branch is ahead"
  local UNTRACKED="# Untracked files"
  local DIVERGED="have diverged"
  local CHANGED="# Changed but not updated"
  local TO_BE_COMMITED="# Changes to be committed"
  local NOT_STAGED="# Changes not staged for commit"
  local LOG=`git log -1 2> /dev/null`

  if [ "$STATUS" != "" ]; then
    if [[ "$STATUS" =~ "$NOTHING_TO_COMMIT" ]]; then
      PROMPT_STATUS="!"
      STATE=""
    elif [[ "$STATUS" =~ "$DIVERGED" ]]; then
      PROMPT_STATUS="!"
      STATE="${STATE}↕"
    elif [[ "$STATUS" =~ "$BEHIND" ]]; then
      PROMPT_STATUS="!"
      STATE="${STATE}↓"
    elif [[ "$STATUS" =~ "$AHEAD" ]]; then
      PROMPT_STATUS="!"
      STATE="${STATE}↑"
    elif [[ "$STATUS" =~ "$CHANGED" ]]; then
      PROMPT_STATUS="!"
      STATE=""
    elif [[ "$STATUS" =~ "$TO_BE_COMMITED" ]]; then
      PROMPT_STATUS=""
      STATE=" *"
    elif [[ "$STATUS" =~ "$NOT_STAGED" ]]; then
      STATE=" !"
    else
      PROMPT_STATUS=""
      STATE=""
    fi

    if [[ "$STATUS" =~ "$UNTRACKED" ]]; then
      STATE="${STATE}*"
    fi
  fi

  if [[ "$1" != "" ]]; then
    cd $CURRENT_DIR
  fi

  echo "$STATE"
}

custom_term () {
  local BRANCH=`git branch 2> /dev/null | grep \* | sed 's/* //'`
  local STATE=`git_status`
  local DIR=$(basename `pwd`)
  local DIR_NAME=`ruby -e "puts '${DIR}'.capitalize"`

  PS1="🍺${LIGHT_RED}/\W:${YELLOW}${BRANCH}${YELLOW} \n >> ${NO_COLOR}"
  title "${RUBY_VERSION} || ${NODE_VERSION} - ${DIR} - ${BRANCH} - ${STATE}"
}

PROMPT_COMMAND=custom_term

pid(){
  ps auwx | perl -anE '$,="\t"; say @F[1,10]' | grep $1
}

show_projects(){
  ls -l1 $HOME/Documents/workspace | egrep --color=never [a-z0-9]
}

youtube_dl_audio(){
  echo "Downloading $1 from Youtube"
  youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=mp3]/best[ext=mp4]/best' $1 --extract-audio --audio-format 'mp3' --audio-quality 0 --embed-thumbnail --add-metadata --metadata-from-title "%(artist)s - %(title)s"
}

youtube_dl_playlist_audio(){
  echo "Downloading $1 from Youtube"
  youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=mp3]/best[ext=mp4]/best' $1 --yes-playlist --extract-audio --audio-format 'mp3' --audio-quality 0 --embed-thumbnail --add-metadata --metadata-from-title "%(artist)s - %(title)s"
}

export CC="/usr/bin/gcc-4.2"
