# Set window title
title() {
  echo -ne "\033]0;$@\007";
}

# reload source
reload() { source ~/.bash_profile; }

# list directory after cd; also save the last directory
# and open it when a new tab is created.
cd() {
  builtin cd "${@:-$HOME}" && ls && pwd > $CDHISTORY;
  if [ -f .rvmrc ]; then
    __rvm_project_rvmrc
  fi
	reload
}

if [ -f $CDHISTORY ]; then
  dir=$(cat $CDHISTORY)

  if [ -d "$dir" ]; then
    builtin cd "$dir" && clear
  fi
fi

# retrieve all rake tasks
_rakecomplete() {
  COMP_WORDBREAKS=${COMP_WORDBREAKS/\:/}
  local words=`rake -T | grep rake | sed 's/rake \([^ ]*\).*/\1/'`
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($(compgen -W "$words" -- $cur))
  return 0
}

complete -o default -F _rakecomplete rake

custom_title () {
  local BRANCH=`git branch 2> /dev/null | grep \* | sed 's/* //'`

  if [[ "$BRANCH" = "" ]]; then
    BRANCH=`git status 2> /dev/null | grep "On branch" | sed 's/# On branch //'`
  fi

  local RUBY_VERSION=`ruby -e "puts RUBY_VERSION"`
  local GEMSET_NAME=`rvm gemset name`
  local RUBY_PROMPT=""
  local STATUS=`git status 2>/dev/null`
  local PROMPT_STATUS=""
  local STATE=" "
  local NOTHING_TO_COMMIT="# Initial commit"
  local BEHIND="# Your branch is behind"
  local AHEAD="# Your branch is ahead"
  local UNTRACKED="# Untracked files"
  local DIVERGED="have diverged"
  local CHANGED="# Changed but not updated"
  local TO_BE_COMMITED="# Changes to be committed"
  local LOG=`git log -1 2> /dev/null`

  if [[ "$GEMSET_NAME" != "" ]]; then
    RUBY_PROMPT="#${GEMSET_NAME}-${RUBY_VERSION}"
  else
    RUBY_PROMPT="#${RUBY_VERSION}"
  fi

  if [ "$STATUS" != "" ]; then
    if [[ "$STATUS" =~ "$NOTHING_TO_COMMIT" ]]; then
      PROMPT_STATUS=" !"
      STATE=""
    elif [[ "$STATUS" =~ "$DIVERGED" ]]; then
      PROMPT_STATUS=" !"
      STATE="${STATE} ↕"
    elif [[ "$STATUS" =~ "$BEHIND" ]]; then
      PROMPT_STATUS=" !"
      STATE="${STATE} ↓"
    elif [[ "$STATUS" =~ "$AHEAD" ]]; then
      PROMPT_STATUS=" !"
      STATE="${STATE} ↑"
    elif [[ "$STATUS" =~ "$CHANGED" ]]; then
      PROMPT_STATUS=" !"
      STATE=""
    elif [[ "$STATUS" =~ "$TO_BE_COMMITED" ]]; then
      PROMPT_STATUS=" !"
      STATE=""
    else
      PROMPT_STATUS=""
      STATE=""
    fi

    if [[ "$STATUS" =~ "$UNTRACKED" ]]; then
      STATE="${STATE} *"
    fi

    title "${RUBY_PROMPT} (${BRANCH}${PROMPT_STATUS}${STATE})"
  else
    title "${RUBY_PROMPT}"
  fi
}

custom_prompt(){
 PS1="${YELLOW}\W ${RED}→ ${NO_COLOR}"
}

custom_title
PROMPT_COMMAND=custom_prompt


# github repository cloning
# usage:
#  github has_permalink     ~> will clone $USER repositories
#  github username repository ~> will clone someone else's
github() {
  if [ $# = 1 ]; then
    git clone git@github.com:$USER/$1.git;
    builtin cd $1 && ls;
  elif [ $# = 2 ]; then
    git clone git://github.com/$1/$2.git;
    builtin cd $2 && ls;
  else
    echo "Usage:";
    echo "  github <repo>        ~> will clone $USER's <repo>";
    echo "  github <user> <repo> ~> will clone <user>'s <repo>";
  fi
}


# taken from http://github.com/bryanl/zshkit/
git-track () {
  local BRANCH=`git branch 2> /dev/null | grep \* | sed 's/* //'`
  git config branch.$BRANCH.remote origin
  git config branch.$BRANCH.merge refs/heads/$BRANCH
  echo "tracking origin/$BRANCH"
}

github-url () { 
  git config remote.origin.url | sed -En 's/git(@|:\/\/)github.com(:|\/)(.+)\/(.+).git/https:\/\/github.com\/\3\/\4/p'; 
}
github-go () { open $(github-url); }
git-scoreboard () { git log | grep '^Author' | sort | uniq -ci | sort -r; }
manp () { man -t $* | ps2pdf - - | open -f -a Preview; }

sinatra(){
  if [ "$1" != "" ]; then
    mkdir $1
    dir=$(pwd)
    cp -Rf $SKEL_PATH/sinatra/* $dir 
    cd $dir
    rm -Rf $dir/.git
    vim $dir
  else
    echo "Error: Digite um nome (ex. sinatra minhapp)"
    echo "Verifique se a Variavel SKEL_PATH esta definida"
  fi
}



# Activate RVM
[[ -s $HOME/.rvm/scripts/rvm ]] && source $HOME/.rvm/scripts/rvm
